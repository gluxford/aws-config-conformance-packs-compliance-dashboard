AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete APRA CPG 234 Compliance Dashboard Solution'

Parameters:
  OrganizationId:
    Type: String
    Description: AWS Organization ID
    AllowedPattern: '^o-[a-z0-9]{10,32}$'
  
  DashboardBucketName:
    Type: String
    Description: Unique S3 bucket name for hosting the dashboard
    AllowedPattern: '^[a-z0-9][a-z0-9-]*[a-z0-9]$'
  
  ConformancePackName:
    Type: String
    Default: 'APRA-CPG-234-Compliance'
    Description: Name of the conformance pack
  
  ConfigAggregatorName:
    Type: String
    Default: 'OrganizationConfigAggregator'
    Description: Name of the Config aggregator

Resources:
  # S3 Bucket for dashboard hosting
  DashboardBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DashboardBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ComplianceDataProcessor.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: data/

  # Bucket policy for public read access
  DashboardBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DashboardBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${DashboardBucket}/*'

  # Config Aggregator
  ConfigAggregator:
    Type: AWS::Config::ConfigurationAggregator
    Properties:
      ConfigurationAggregatorName: !Ref ConfigAggregatorName
      OrganizationAggregationSource:
        AllAwsRegions: true
        RoleArn: !GetAtt ConfigAggregatorRole.Arn

  # IAM Role for Config Aggregator
  ConfigAggregatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/ConfigRole
      Policies:
        - PolicyName: OrganizationAggregatorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - organizations:ListAccounts
                  - organizations:DescribeOrganization
                  - organizations:ListAWSServiceAccessForOrganization
                Resource: '*'

  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ComplianceDataAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - config:GetAggregateComplianceDetailsByConfigRule
                  - config:GetAggregateConfigRuleComplianceSummary
                  - config:GetAggregateConformancePackComplianceSummary
                  - config:GetAggregateResourceConfig
                  - config:DescribeConfigurationAggregators
                  - config:DescribeConformancePacks
                  - config:GetConformancePackComplianceDetails
                  - organizations:ListAccounts
                  - organizations:DescribeOrganization
                  - sts:AssumeRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub '${DashboardBucket}/*'

  # Lambda function for data collection
  ComplianceDataCollector:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ConformancePackName}-data-collector'
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
      MemorySize: 1024
      Environment:
        Variables:
          DASHBOARD_BUCKET: !Ref DashboardBucket
          ORGANIZATION_ID: !Ref OrganizationId
          CONFIG_AGGREGATOR_NAME: !Ref ConfigAggregatorName
          CONFORMANCE_PACK_NAME: !Ref ConformancePackName
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import os
          from datetime import datetime, timezone
          from decimal import Decimal
          
          class DecimalEncoder(json.JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, Decimal):
                      return float(obj)
                  return super(DecimalEncoder, self).default(obj)
          
          def lambda_handler(event, context):
              config_client = boto3.client('config')
              s3_client = boto3.client('s3')
              org_client = boto3.client('organizations')
              
              bucket = os.environ['DASHBOARD_BUCKET']
              aggregator_name = os.environ['CONFIG_AGGREGATOR_NAME']
              conformance_pack_name = os.environ['CONFORMANCE_PACK_NAME']
              
              try:
                  # Get organization accounts
                  accounts_response = org_client.list_accounts()
                  accounts = [{'accountId': acc['Id'], 'accountName': acc['Name'], 'status': acc['Status']} 
                             for acc in accounts_response['Accounts']]
                  
                  # Get conformance pack compliance summary
                  compliance_summary = config_client.get_aggregate_conformance_pack_compliance_summary(
                      ConfigurationAggregatorName=aggregator_name
                  )
                  
                  # Get detailed compliance for each conformance pack
                  detailed_compliance = {}
                  for pack_summary in compliance_summary['AggregateConformancePackComplianceSummaries']:
                      pack_name = pack_summary['ConformancePackName']
                      
                      # Get compliance details
                      details = config_client.get_aggregate_conformance_pack_compliance_details(
                          ConfigurationAggregatorName=aggregator_name,
                          ConformancePackName=pack_name
                      )
                      
                      detailed_compliance[pack_name] = {
                          'summary': pack_summary,
                          'details': details['AggregateConformancePackComplianceDetails']
                      }
                  
                  # Calculate organization-wide compliance
                  org_compliance = calculate_org_compliance(compliance_summary)
                  
                  # Generate remediation suggestions
                  remediation_data = generate_remediation_suggestions(detailed_compliance)
                  
                  # Prepare dashboard data
                  dashboard_data = {
                      'lastUpdated': datetime.now(timezone.utc).isoformat(),
                      'accounts': accounts,
                      'conformancePackSummary': compliance_summary['AggregateConformancePackComplianceSummaries'],
                      'detailedCompliance': detailed_compliance,
                      'organizationCompliance': org_compliance,
                      'remediationSuggestions': remediation_data
                  }
                  
                  # Upload to S3
                  s3_client.put_object(
                      Bucket=bucket,
                      Key='data/compliance-summary.json',
                      Body=json.dumps(dashboard_data, indent=2, cls=DecimalEncoder),
                      ContentType='application/json'
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Data collection completed successfully')
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
          
          def calculate_org_compliance(summary):
              summaries = summary['AggregateConformancePackComplianceSummaries']
              total_compliant = sum(pack.get('CompliantRuleCount', 0) for pack in summaries)
              total_rules = sum(pack.get('TotalRuleCount', 0) for pack in summaries)
              
              return {
                  'compliantRules': total_compliant,
                  'totalRules': total_rules,
                  'compliancePercentage': round((total_compliant / total_rules * 100) if total_rules > 0 else 0, 2),
                  'nonCompliantRules': total_rules - total_compliant
              }
          
          def generate_remediation_suggestions(detailed_compliance):
              remediation_map = {
                  'access-keys-rotated': 'Rotate access keys regularly and implement automated rotation',
                  'acm-certificate-expiration-check': 'Set up automated certificate renewal and monitoring',
                  'cloudtrail-enabled': 'Enable CloudTrail in all regions with proper S3 bucket configuration',
                  'ec2-security-group-attached-to-eni': 'Review and update security group rules to follow least privilege',
                  'guardduty-enabled-centralized': 'Enable GuardDuty in all accounts and regions',
                  'iam-password-policy': 'Update IAM password policy to meet security requirements',
                  'mfa-enabled-for-iam-console-access': 'Enforce MFA for all IAM users with console access',
                  's3-bucket-public-access-prohibited': 'Review and restrict public access to S3 buckets'
              }
              
              suggestions = {}
              for pack_name, pack_data in detailed_compliance.items():
                  pack_suggestions = []
                  for detail in pack_data['details']:
                      if detail['ComplianceType'] == 'NON_COMPLIANT':
                          rule_name = detail['ConfigRuleName']
                          suggestion = remediation_map.get(rule_name, f'Review and remediate {rule_name}')
                          pack_suggestions.append({
                              'ruleName': rule_name,
                              'accountId': detail['AccountId'],
                              'awsRegion': detail['AwsRegion'],
                              'suggestion': suggestion
                          })
                  suggestions[pack_name] = pack_suggestions
              
              return suggestions

  # Lambda function for data processing
  ComplianceDataProcessor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ConformancePackName}-data-processor'
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Code:
        ZipFile: |
          import json
          import boto3
          
          def lambda_handler(event, context):
              # Process S3 events and trigger dashboard updates
              s3_client = boto3.client('s3')
              
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  
                  if key.startswith('data/'):
                      print(f"Processing compliance data update: {key}")
                      # Additional processing logic can be added here
              
              return {'statusCode': 200, 'body': 'Processing completed'}

  # Permission for S3 to invoke Lambda
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ComplianceDataProcessor
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub '${DashboardBucket}/*'

  # EventBridge rule for scheduled data collection
  ComplianceDataSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Trigger compliance data collection every 4 hours'
      ScheduleExpression: 'rate(4 hours)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt ComplianceDataCollector.Arn
          Id: ComplianceDataCollectorTarget

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ComplianceDataCollector
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ComplianceDataSchedule.Arn

  # StackSet for deploying conformance packs across organization
  ConformancePackStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      StackSetName: !Sub '${ConformancePackName}-StackSet'
      Description: 'Deploy APRA CPG 234 conformance pack across organization'
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      PermissionModel: SERVICE_MANAGED
      AutoDeployment:
        Enabled: true
        RetainStacksOnAccountRemoval: false
      OperationPreferences:
        RegionConcurrencyType: PARALLEL
        MaxConcurrentPercentage: 100
        FailureTolerancePercentage: 10
      TemplateBody: !Sub |
        AWSTemplateFormatVersion: '2010-09-09'
        Description: 'Deploy conformance pack and IAM role'
        
        Parameters:
          AuditAccountId:
            Type: String
            Default: '${AWS::AccountId}'
        
        Resources:
          ConfigComplianceRole:
            Type: AWS::IAM::Role
            Properties:
              RoleName: '${ConformancePackName}-ComplianceRole'
              AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Principal:
                      AWS: !Sub 'arn:aws:iam::${!Ref AuditAccountId}:root'
                    Action: sts:AssumeRole
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/ConfigRole
                - arn:aws:iam::aws:policy/ReadOnlyAccess
              Policies:
                - PolicyName: ConfigCompliancePolicy
                  PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - config:GetComplianceDetailsByConfigRule
                          - config:GetComplianceDetailsByResource
                          - config:GetComplianceSummaryByConfigRule
                          - config:DescribeConfigRules
                          - config:DescribeConformancePacks
                          - config:GetConformancePackComplianceDetails
                        Resource: '*'

Outputs:
  DashboardURL:
    Description: URL of the compliance dashboard
    Value: !Sub 'http://${DashboardBucket}.s3-website-${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardURL'
  
  DashboardBucket:
    Description: S3 bucket hosting the dashboard
    Value: !Ref DashboardBucket
    Export:
      Name: !Sub '${AWS::StackName}-DashboardBucket'
  
  ConfigAggregatorName:
    Description: Name of the Config aggregator
    Value: !Ref ConfigAggregator
    Export:
      Name: !Sub '${AWS::StackName}-ConfigAggregator'
